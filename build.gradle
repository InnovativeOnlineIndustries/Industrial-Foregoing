buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.31"
        classpath 'com.selesse:gradle-git-changelog:0.2.+'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.0"
    }
}
plugins {
    id "com.github.hierynomus.license" version "0.14.0"
    id "com.matthewprenger.cursegradle" version "1.1.0"
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'com.selesse.git.changelog'
apply plugin: 'java'


String b = ""
if (project.hasProperty("teamcity")) {
    b = System.getenv("BUILD_NUMBER")
}

if (b == null || b == "") {
    version = "${project.minecraft_version}-${project.mod_version}"
} else {
    version = "${project.minecraft_version}-${project.mod_version}-" + b
}
group = "com.buuz135.industrial.IndustrialForegoing" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "industrialforegoing"

sourceCompatibility = "1.8"
targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.12.2-14.23.5.2806"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_39"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace '@MINECRAFT-VERSION@', project.minecraft_version
    replace '@VERSION@', version
}

configurations {
    all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }
}

repositories {
    mavenCentral()
    jcenter()
    maven { name = 'forgelin'; url = 'http://maven.shadowfacts.net' }
    maven { name='TCL'; url='https://maven.mcmoddev.com' }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven { url 'http://maven.covers1624.net/' }
    maven { // CraftTweaker
        name 'jared maven'
        url "http://maven.blamejared.com/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jre8:1.1.3-2"
    deobfCompile("net.ndrei:tesla-core-lib:${project.teslacorelib_mc_version}-${project.teslacorelib_version}") { changing = true }
    compileOnly "org.projectlombok:lombok:1.16.16"
    // compile against the JEI API
    deobfCompile "mezz.jei:jei_1.12.2:${project.jei_version}:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_1.12.2:${project.jei_version}"
    compile "cofh:RedstoneFlux:1.12-${project.redstoneflux_version}:universal"
    compileOnly "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.0.10.306"
    deobfCompile "baubles:Baubles:1.12:1.5.2"
    deobfCompile "moo-fluids:MooFluids:1.12.2:1.7.11.02a"
    compileOnly(
            fg.deobf("curse.maven:AgriCraft-225635:3317747"),
            fg.deobf("curse.maven:InfinityLib-251396:3317119")
    )
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.mod_version
    inputs.property "mcversion", project.minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.mod_version, 'mcversion': project.minecraft_version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task apiJar(type: Jar, dependsOn: 'classes') {
    classifier = 'api'
    from(sourceSets.main.output) {
        include 'com/buuz135/industrial/api/**'
    }
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }
    extension = 'jar'
    classifier = 'deobf'
}

artifacts {
    archives devJar
    archives apiJar
}

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ftp:2.2"
}

uploadArchives {
    if (project.hasProperty('username') && project.hasProperty('password')) {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars
                //repository(url: System.properties['URL']) {
                repository(url: "ftp://dyonovan.com/srv/http/maven2") {
                    authentication(userName: "${username}", password: "${password}")
                }
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName

                    pom.project {
                        name = project.archivesBaseName
                        packaging 'jar'
                        description 'Industrial Foregoing'
                        url 'https://github.com/Buuz135/Industrial-Foregoing'
                        scm {
                            url 'https://github.com/Buuz135/Industrial-Foregoing'
                            connection 'scm:git:git@github.com/Buuz135/Industrial-Foregoing'
                            developerConnection 'scm:git:git@github.com/Buuz135/Industrial-Foregoing'
                        }
                        issueManagement {
                            system 'github'
                            url 'https://github.com/Buuz135/Industrial-Foregoing/issues'
                        }
                        licenses {
                            license {
                                name 'MIT License'
                                url 'https://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'Buuz135'
                                name 'Buuz135'
                                roles {
                                    role 'developer'
                                }
                            }
                        }
                    }
                }
            }

        }
    }
}

changelog {
    title = "Industrial Foregoing"
    fileName = "CHANGELOG.md"
    outputDirectory = file("$projectDir")
    since = '1.10.6'
    commitFormat = '%s (%an)'
    markdown {
        commitFormat = '* %s (%an)'
    }
    includeLines = {
        !it.contains("Merge")
    }
    processLines = {
        String input = it as String
        if (input.contains('[ci skip] ')) {
            input = input.minus('[ci skip] ')
        }
        input
    }
}

tasks.curseforge.enabled =  project.hasProperty('curse_api')

curseforge {
    if (project.hasProperty('curse_api')) {
        apiKey = project.curse_api
    }
    project {
        id = '266515'
        changelog = file('CHANGELOG.md')
        changelogType = 'markdown'
        releaseType = 'beta'

        mainArtifact(jar){
            relations {
                requiredLibrary 'tesla-core-lib'
            }
        }

        addArtifact sourceJar
        addArtifact apiJar
        addArtifact devJar
    }
}

license {
    header rootProject.file('HEADER')
    include "**/*.java"
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Buuz135'
    ignoreFailures = true
    mapping {
        java='SLASHSTAR_STYLE'
    }
}
